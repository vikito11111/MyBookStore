@model MyBookStore.ViewModels.Home.IndexViewModel

@{
    ViewBag.Title = "Home Page";
}

<div class="container mt-5">
    <h1 class="display-4 text-center mb-5">Welcome to the Book Store</h1>

    @foreach (var bookSection in new[] { ("Most Recently Added Books:", Model.NewestBooks) })
    {
        <h2 class="mb-4">@bookSection.Item1</h2>
        <div class="row">
            @foreach (var book in bookSection.Item2)
            {
                <div class="col-md-4 mb-4">
                    <div class="book-card card">
                        <img class="card-img-top book-image" src="@book.CoverImage" alt="Book cover image">
                        <div class="card-body">
                            <h5 class="card-title">@book.Title</h5>
                            <p class="card-text">
                                <strong>Author:</strong> @book.Author?.Name <br>
                                <strong>Published:</strong> @book.PublicationDate.ToString("d") <br>
                                <strong>Genre:</strong> @book.Genre?.Name <br>
                                <strong>Price:</strong> $@book.Price <br>
                                <strong>Average Rating:</strong> <span class="average-rating" data-book-id="@book.Id">@book.AverageRating.ToString("F2")</span> ⭐
                            </p>
                            <div class="star-rating" data-book-id="@book.Id">
                                @for (int i = 1; i <= 5; i++)
                                {
                                    <span class="star @(i <= book.UserRating ? "filled" : "")" data-value="@i">★</span>
                                }
                            </div>
                            <div class="d-flex justify-content-between align-items-center">
                                <div class="d-flex justify-content-between align-items-center button-container">
                                    <a href='@Url.Action("ViewBook", "Book", new { id = book.Id })' class="btn btn-outline-secondary view-btn">View</a>
                                    <a href="@Url.Action("AddToCart", "Cart", new { bookId = book.Id })" class="btn btn-primary buy-btn">Buy</a>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }

    @if (Model.RecommendedBooks?.Any() == true)
    {
        <h2 class="mb-4">Recommended Books For You</h2>
        <div class="row">
            @foreach (var book in Model.RecommendedBooks)
            {
                <div class="col-md-4 mb-4">
                    <div class="book-card card">
                        <img class="card-img-top book-image" src="@book.CoverImage" alt="Book cover image">
                        <div class="card-body">
                            <h5 class="card-title">@book.Title</h5>
                            <p class="card-text">
                                <strong>Author:</strong> @book.Author?.Name <br>
                                <strong>Published:</strong> @book.PublicationDate.ToString("d") <br>
                                <strong>Genre:</strong> @book.Genre?.Name <br>
                                <strong>Price:</strong> $@book.Price <br>
                                <strong>Average Rating:</strong> <span class="average-rating" data-book-id="@book.Id">@book.AverageRating.ToString("F2")</span> ⭐
                            </p>
                            <div class="star-rating" data-book-id="@book.Id">
                                @for (int i = 1; i <= 5; i++)
                                {
                                    <span class="star @(i <= book.UserRating ? "filled" : "")" data-value="@i">★</span>
                                }
                            </div>
                            <div class="d-flex justify-content-between align-items-center">
                                <div class="d-flex justify-content-between align-items-center button-container">
                                    <a href='@Url.Action("ViewBook", "Book", new { id = book.Id })' class="btn btn-outline-secondary view-btn">View</a>
                                    <a href="@Url.Action("AddToCart", "Cart", new { bookId = book.Id })" class="btn btn-primary buy-btn">Buy</a>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    @if (Model.BooksBySameAuthor?.Any() == true)
    {
        <h2 class="mb-4">More books by @Model.BooksBySameAuthor.FirstOrDefault().Author?.Name</h2>
        <div class="row">
            @foreach (var book in Model.BooksBySameAuthor)
            {
                <div class="col-md-4 mb-4">
                    <div class="book-card card">
                        <img class="card-img-top book-image" src="@book.CoverImage" alt="Book cover image">
                        <div class="card-body">
                            <h5 class="card-title">@book.Title</h5>
                            <p class="card-text">
                                <strong>Author:</strong> @book.Author?.Name <br>
                                <strong>Published:</strong> @book.PublicationDate.ToString("d") <br>
                                <strong>Genre:</strong> @book.Genre?.Name <br>
                                <strong>Price:</strong> $@book.Price <br>
                                <strong>Average Rating:</strong> <span class="average-rating" data-book-id="@book.Id">@book.AverageRating.ToString("F2")</span> ⭐
                            </p>
                            <div class="star-rating" data-book-id="@book.Id">
                                @for (int i = 1; i <= 5; i++)
                                {
                                    <span class="star @(i <= book.UserRating ? "filled" : "")" data-value="@i">★</span>
                                }
                            </div>
                            <div class="d-flex justify-content-between align-items-center">
                                <div class="d-flex justify-content-between align-items-center button-container">
                                    <a href='@Url.Action("ViewBook", "Book", new { id = book.Id })' class="btn btn-outline-secondary view-btn">View</a>
                                    <a href="@Url.Action("AddToCart", "Cart", new { bookId = book.Id })" class="btn btn-primary buy-btn">Buy</a>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        let stars = document.querySelectorAll('.star');

        stars.forEach(function (star) {
            star.addEventListener('click', function () {
                let bookId = this.parentElement.getAttribute('data-book-id');
                let ratingValue = this.getAttribute('data-value');

                // AJAX call
                sendRating(bookId, ratingValue);
            });

            // Add hover effect
            star.addEventListener('mouseover', function () {
                let parentContainer = this.parentElement;
                let hoveredValue = parseInt(this.getAttribute('data-value'));
                let siblingStars = parentContainer.querySelectorAll('.star');

                siblingStars.forEach(s => {
                    if (parseInt(s.getAttribute('data-value')) <= hoveredValue) {
                        s.classList.add('hovered');
                    } else {
                        s.classList.remove('hovered');
                    }
                });
            });

            star.addEventListener('mouseout', function () {
                let parentContainer = this.parentElement;
                let siblingStars = parentContainer.querySelectorAll('.star');

                siblingStars.forEach(s => s.classList.remove('hovered'));
            });
        });
    });

    function sendRating(bookId, ratingValue) {
        // Here, I'm using the fetch API to make the AJAX call.
        fetch('/Book/RateBook', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ bookId: bookId, rating: ratingValue })
        })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert('Thank you for your rating!');
                    fillStars(bookId, data.rating); // Call the function to fill stars
                    location.reload();
                } else {
                    alert('There was an issue saving your rating.');
                }
            })
            .catch((error) => {
                console.error('Error:', error);
                alert('There was an error sending your rating.');
            });
    }

    function fillStars(bookId, rating) {
        // Get the star-rating div for the specific book
        let starContainer = document.querySelector(`.star-rating[data-book-id="${bookId}"]`);
    
        // Reset all stars
        starContainer.querySelectorAll('.star').forEach(star => {
            star.classList.remove('filled');
        });
    
        // Fill the required stars
        for(let i = 1; i <= rating; i++) {
            starContainer.querySelector(`.star[data-value="${i}"]`).classList.add('filled');
        }
    }
</script>

<style>
    .container 
    {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    .book-card 
    {
        border: 1px solid #e2e2e2;
        transition: transform 0.3s ease, box-shadow 0.3s ease;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.05);
    }

    .book-card:hover 
    {
        transform: translateY(-3px);
        box-shadow: 0 8px 24px rgba(0, 0, 0, 0.08);
    }

    h1, h2, h3, h4, h5, h6 
    {
        font-weight: 600;
        color: #333;
        text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.02);
    }

    h1.display-4 
    {
        border-bottom: 2px solid #737370;
        padding-bottom: 15px;
        margin-bottom: 20px;
    }

    h2 
    {
        font-size: 24px;
        margin-bottom: 25px;
        padding-bottom: 10px;
        border-bottom: 1px solid #d8d8d8;
    }

    .star 
    {
        font-size: 24px;
        cursor: pointer;
        transition: color 0.2s, transform 0.2s, text-shadow 0.2s;
        color: #f2f2f2;
        text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.1);
    }

    .star-rating 
    {
        display: flex;
        flex-direction: row;
        justify-content: flex-end;
    }

    .star.filled,
    .star.hovered 
    {
        color: gold;
        background: linear-gradient(45deg, #FFD700, #FFB300);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        text-shadow: 1px 1px 3px rgba(0, 0, 0, 0.2);
    }

    .star:hover 
    {
        transform: scale(1.1);
        color: gold;
        text-shadow: 1px 1px 3px rgba(0, 0, 0, 0.3);
    }

    .button-container .btn-primary, .button-container .view-btn 
    {
        padding: 10px 20px;
        border-radius: 25px;
        font-weight: bold;
        transition: all 0.3s ease-in-out;
        box-shadow: 0 3px 5px rgba(0, 0, 0, 0.1);
    }

    .button-container .btn-primary:hover 
    {
        background-image: linear-gradient(to right, #FF8A33, #FF5733);
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.15);
        transform: translateY(-2px);
    }

    .button-container .view-btn:hover 
    {
        color: white;
        background-color: #FF5733;
        border-color: #FF5733;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.15);
        transform: translateY(-2px);
    }
</style>
